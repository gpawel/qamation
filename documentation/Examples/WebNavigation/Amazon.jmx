<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3.20171014">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="TEST TAB 1 (AMAZON SCENARIO)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1508713060000</longProp>
        <longProp name="ThreadGroup.end_time">1508713060000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="SET BASE DIRECTORY" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="BASE_DIR" elementType="Argument">
              <stringProp name="Argument.name">BASE_DIR</stringProp>
              <stringProp name="Argument.value">${__P(ROOT)}/WebNavigation</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">${__BeanShell( import org.apache.jmeter.services.FileServer; FileServer.getFileServer().getBaseDir(); )}</stringProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="BROWSER PARAMETERS" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="STOP_INDICATOR" elementType="Argument">
              <stringProp name="Argument.name">STOP_INDICATOR</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="BROWSER_NAME" elementType="Argument">
              <stringProp name="Argument.name">BROWSER_NAME</stringProp>
              <stringProp name="Argument.value">BROWSER</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CHROME_DRIVER_PATH" elementType="Argument">
              <stringProp name="Argument.name">CHROME_DRIVER_PATH</stringProp>
              <stringProp name="Argument.value">${__P(SELENIUM_HOME)}/Chrome/chromedriver</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="IE_DRIVER_PATH" elementType="Argument">
              <stringProp name="Argument.name">IE_DRIVER_PATH</stringProp>
              <stringProp name="Argument.value">${__P(SELENIUM_HOME)}/Chrome/chromedriver</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FF_DRIVER_PATH" elementType="Argument">
              <stringProp name="Argument.name">FF_DRIVER_PATH</stringProp>
              <stringProp name="Argument.value">${__P(SELENIUM_HOME)}/FireFox/geckodriver</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">${BASE_DIR}/../../../../Selenium/Chrome/chromedriver</stringProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="PAGE IMPLEMENTATION CLASS" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="PAGE_IMPLEMENTATION_CLASS" elementType="Argument">
              <stringProp name="Argument.name">PAGE_IMPLEMENTATION_CLASS</stringProp>
              <stringProp name="Argument.value">org.qamation.web.page.GeneralPage</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="CREATE CHROME DRIVER" enabled="true">
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="ENTER true OR false TO INDICATE WHETHER TO STOP AFTER FAILURE" elementType="Argument">
                <stringProp name="Argument.name">ENTER true OR false TO INDICATE WHETHER TO STOP AFTER FAILURE</stringProp>
                <stringProp name="Argument.value">${STOP_INDICATOR}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ENTER VARIABLE NAME WHERE BROWSER IS STORED" elementType="Argument">
                <stringProp name="Argument.name">ENTER VARIABLE NAME WHERE BROWSER IS STORED</stringProp>
                <stringProp name="Argument.value">${BROWSER_NAME}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="SELECT BROWSER TO CREATE: Chrome, FF, IE" elementType="Argument">
                <stringProp name="Argument.name">SELECT BROWSER TO CREATE: Chrome, FF, IE</stringProp>
                <stringProp name="Argument.value">Chrome</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="SELECT BROWSER TYPE: Local or Remote" elementType="Argument">
                <stringProp name="Argument.name">SELECT BROWSER TYPE: Local or Remote</stringProp>
                <stringProp name="Argument.value">Local</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ENTER PATH TO CHROME DRIVER." elementType="Argument">
                <stringProp name="Argument.name">ENTER PATH TO CHROME DRIVER.</stringProp>
                <stringProp name="Argument.value">${CHROME_DRIVER_PATH}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ENTER PATH TO IE DRIVER." elementType="Argument">
                <stringProp name="Argument.name">ENTER PATH TO IE DRIVER.</stringProp>
                <stringProp name="Argument.value">${IE_DRIVER_PATH}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ENTER PATH TO FF DRIVER" elementType="Argument">
                <stringProp name="Argument.name">ENTER PATH TO FF DRIVER</stringProp>
                <stringProp name="Argument.value">${FF_DRIVER_PATH}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">org.qamation.java.sampler.browser.CreateBrowser</stringProp>
        </JavaSampler>
        <hashTree/>
        <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="NAVIGATE TO AMAZON" enabled="true">
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="ENTER true OR false TO INDICATE WHETHER TO STOP AFTER FAILURE" elementType="Argument">
                <stringProp name="Argument.name">ENTER true OR false TO INDICATE WHETHER TO STOP AFTER FAILURE</stringProp>
                <stringProp name="Argument.value">${STOP_INDICATOR}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ENTER VARIABLE NAME WHERE BROWSER IS STORED" elementType="Argument">
                <stringProp name="Argument.name">ENTER VARIABLE NAME WHERE BROWSER IS STORED</stringProp>
                <stringProp name="Argument.value">${BROWSER_NAME}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ENTER PAGE IMPLEMENTATION CLASS" elementType="Argument">
                <stringProp name="Argument.name">ENTER PAGE IMPLEMENTATION CLASS</stringProp>
                <stringProp name="Argument.value">${PAGE_IMPLEMENTATION_CLASS}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ENTER WEB PAGE TO BE OPENED" elementType="Argument">
                <stringProp name="Argument.name">ENTER WEB PAGE TO BE OPENED</stringProp>
                <stringProp name="Argument.value">https://amazon.ca</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">org.qamation.java.sampler.browser.OpenWebPage</stringProp>
        </JavaSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">true</boolProp>
        </DebugSampler>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="SET LOG FILE FUFFIX" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="LOG_FILE_NAME" elementType="Argument">
              <stringProp name="Argument.name">LOG_FILE_NAME</stringProp>
              <stringProp name="Argument.value">AMAZON_TEST_${__time()}.xlsx</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <org.qamation.jmeter.data.provider.controller.ExcelDataController guiclass="TestBeanGUI" testclass="org.qamation.jmeter.data.provider.controller.ExcelDataController" testname="Excel Data Controller" enabled="true">
          <stringProp name="filename">${BASE_DIR}/amazon.xlsx</stringProp>
          <stringProp name="dataProviderImplClassName">org.qamation.data.provider.DataProviderExcelAdapter</stringProp>
          <stringProp name="tabNumber">0</stringProp>
          <stringProp name="fieldNames"></stringProp>
          <boolProp name="isFirstLineHeader">true</boolProp>
          <boolProp name="resetAtEOF">false</boolProp>
        </org.qamation.jmeter.data.provider.controller.ExcelDataController>
        <hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">true</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">true</boolProp>
          </DebugSampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF RUN" enabled="true">
            <stringProp name="IfController.condition">${__groovy( String run = vars.get(&quot;RUN&quot;);log.info(&quot;\nrun: &quot;+run); return run.equalsIgnoreCase(&quot;Y&quot;); )}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="PAGE PROCESSOR" enabled="true">
              <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="ENTER true OR false TO INDICATE WHETHER TO STOP AFTER FAILURE" elementType="Argument">
                    <stringProp name="Argument.name">ENTER true OR false TO INDICATE WHETHER TO STOP AFTER FAILURE</stringProp>
                    <stringProp name="Argument.value">${STOP_INDICATOR}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="ENTER VARIABLE NAME WHERE BROWSER IS STORED" elementType="Argument">
                    <stringProp name="Argument.name">ENTER VARIABLE NAME WHERE BROWSER IS STORED</stringProp>
                    <stringProp name="Argument.value">${BROWSER_NAME}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="ENTER PAGE IMPLEMENTATION CLASS" elementType="Argument">
                    <stringProp name="Argument.name">ENTER PAGE IMPLEMENTATION CLASS</stringProp>
                    <stringProp name="Argument.value">${PAGE_IMPLEMENTATION_CLASS}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="ENTER NAVAGATION SCTRING" elementType="Argument">
                    <stringProp name="Argument.name">ENTER NAVAGATION SCTRING</stringProp>
                    <stringProp name="Argument.value">${NAVIGATION}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="ENTER A SYMBOL THAT SEPARATES NAVIGATION STEPS" elementType="Argument">
                    <stringProp name="Argument.name">ENTER A SYMBOL THAT SEPARATES NAVIGATION STEPS</stringProp>
                    <stringProp name="Argument.value">\|</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="ENTER ELEMENT ID.  Provide empty value to skip verification" elementType="Argument">
                    <stringProp name="Argument.name">ENTER ELEMENT ID.  Provide empty value to skip verification</stringProp>
                    <stringProp name="Argument.value">${ELEMENT_LOCATOR}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="ENTER EXPECTED RESULT. Provide empty value to skip verification." elementType="Argument">
                    <stringProp name="Argument.name">ENTER EXPECTED RESULT. Provide empty value to skip verification.</stringProp>
                    <stringProp name="Argument.value">${EXPECTED}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="ENTER URL TO GO BACK. Provide empty value to skip." elementType="Argument">
                    <stringProp name="Argument.name">ENTER URL TO GO BACK. Provide empty value to skip.</stringProp>
                    <stringProp name="Argument.value">${NAVIGATE}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="ENTER A COMMENT TO BE INCLUDED INTO A LABEL. Leave empty " elementType="Argument">
                    <stringProp name="Argument.name">ENTER A COMMENT TO BE INCLUDED INTO A LABEL. Leave empty </stringProp>
                    <stringProp name="Argument.value">${COMMENT}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="ENTER VARIABLE NAME TO STORE EXTACTED DATA" elementType="Argument">
                    <stringProp name="Argument.name">ENTER VARIABLE NAME TO STORE EXTACTED DATA</stringProp>
                    <stringProp name="Argument.value">${EXTRACT_TO}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="classname">org.qamation.java.sampler.browser.PageProcessor</stringProp>
            </JavaSampler>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF SCRIPT" enabled="true">
              <stringProp name="IfController.condition">${__groovy(if(vars.get(&quot;SCRIPT&quot;)==null) return false; return vars.get(&quot;SCRIPT&quot;).length()&gt;0 )}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="RUN SCRIPT" enabled="true">
                <stringProp name="BeanShellSampler.query">${__evalVar(SCRIPT)}</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <BeanShellListener guiclass="TestBeanGUI" testclass="BeanShellListener" testname="WRITE LOGS" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">writeToExcelLog(&quot;${LOG_FILE_NAME}&quot;);</stringProp>
        </BeanShellListener>
        <hashTree/>
        <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="CLOSE BROWSER" enabled="false">
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="ENTER true OR false TO INDICATE WHETHER TO STOP AFTER FAILURE" elementType="Argument">
                <stringProp name="Argument.name">ENTER true OR false TO INDICATE WHETHER TO STOP AFTER FAILURE</stringProp>
                <stringProp name="Argument.value">${STOP_INDICATOR}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ENTER VARIABLE NAME WHERE BROWSER IS STORED" elementType="Argument">
                <stringProp name="Argument.name">ENTER VARIABLE NAME WHERE BROWSER IS STORED</stringProp>
                <stringProp name="Argument.value">${BROWSER_NAME}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">org.qamation.java.sampler.browser.CloseBrowser</stringProp>
        </JavaSampler>
        <hashTree/>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="tearDown Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1536620076000</longProp>
        <longProp name="ThreadGroup.end_time">1536620076000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </PostThreadGroup>
      <hashTree>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">ps -ef | grep &apos;chromedriver&apos; | grep -v grep | awk &apos;{print $2}&apos; | xargs -r kill -9</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory">${__P(user.dir)}</stringProp>
          <stringProp name="TestPlan.comments">ps -ef | grep &apos;chromedriver&apos; | grep -v grep | awk &apos;{print $2}&apos; | xargs -r kill -9  pkill -9 chromedriver</stringProp>
        </SystemSampler>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
